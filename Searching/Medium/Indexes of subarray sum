Given an unsorted array arr containing only non-negative integers, 
your task is to find a continuous subarray (a contiguous sequence of elements) whose sum equals a specified value target. 
You need to return the 1-based indices of the leftmost and rightmost elements of this subarray.

Examples:
Input: arr[] = [1,2,3,7,5], target = 12
Output: [2, 4]
Explanation: The sum of elements from 2nd to 4th position is 12.


class Solution
{
    //Function to find a continuous sub-array which adds up to a given number.
    static ArrayList<Integer> subarraySum(int[] arr, int n, int s) 
    {
        ArrayList<Integer>list=new ArrayList<>();
        int sum=0;
        int low=0;
        for(int i=0;i<n;i++){
            sum=sum+arr[i];
            while(low<i && sum>s){
                sum=sum-arr[low];
                low++;
            }
            if(sum==s){
                list.add(low+1);
                list.add(i+1);
                return list;
            }
        }
        list.add(-1);
        return list;
    }
}
